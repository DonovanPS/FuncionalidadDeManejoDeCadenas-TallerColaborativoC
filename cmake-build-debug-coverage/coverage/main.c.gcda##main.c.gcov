        -:    0:Source:C:/Users/donov/CLionProjects/FuncionalidadDeManejoDeCadenas-TallerColaborativoC/main.c
        -:    0:Graph:C:\Users\donov\CLionProjects\FuncionalidadDeManejoDeCadenas-TallerColaborativoC\cmake-build-debug-coverage\CMakeFiles\FuncionalidadDeManejoDeCadenas_TallerColaborativoC.dir\main.c.gcno
        -:    0:Data:C:\Users\donov\CLionProjects\FuncionalidadDeManejoDeCadenas-TallerColaborativoC\cmake-build-debug-coverage\CMakeFiles\FuncionalidadDeManejoDeCadenas_TallerColaborativoC.dir\main.c.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    0:Source is newer than graph
        -:    1:#include <stdio.h>
        -:    2:#include <string.h>
        -:    3:#include <ctype.h>
        -:    4:#include <process.h>
        -:    5:
function convertirNombrePropio called 0 returned 0% blocks executed 0%
    #####:    6:void convertirNombrePropio(){
    #####:    7:    int tamano,aux=0;
        -:    8:    char cadena[255],cadenaNomPropio[255];
    #####:    9:    printf("\n>>Convertir en nombre propio<<"
    %%%%%:    9-block  0
call    0 never executed
        -:   10:           "\nDigite la cadena de texto...");
    #####:   11:    gets(cadena);
call    0 never executed
    #####:   12:    tamano= strlen(cadena);
    #####:   13:    for (int i = 0; i < tamano; ++i) {
    %%%%%:   13-block  0
    %%%%%:   13-block  1
branch  0 never executed
branch  1 never executed
    #####:   14:        if (aux==i){
    %%%%%:   14-block  0
branch  0 never executed
branch  1 never executed
    #####:   15:            cadenaNomPropio[i]= toupper(cadena[i]);
    %%%%%:   15-block  0
        -:   16:        } else{
    #####:   17:            if (cadena[i]==' '){
    %%%%%:   17-block  0
branch  0 never executed
branch  1 never executed
    #####:   18:                aux=i+1;
    #####:   19:                cadenaNomPropio[i]= cadena[i];
    %%%%%:   19-block  0
        -:   20:            } else{
    #####:   21:                cadenaNomPropio[i]=cadena[i];
    %%%%%:   21-block  0
        -:   22:            }
        -:   23:        }
        -:   24:    }
    #####:   25:    printf("%s \n",cadenaNomPropio);
    %%%%%:   25-block  0
call    0 never executed
    #####:   26:    system( "pause" );
call    0 never executed
    #####:   27:}
        -:   28:
        -:   29:
function numVecesPalabra called 0 returned 0% blocks executed 0%
    #####:   30:void numVecesPalabra(){
    #####:   31:    int tamano,contador=0,aux=0;
        -:   32:    char cadena[255],cadenaAux[50],palabraComparar[50];
    #####:   33:    printf("\n>>N%cmero de veces que existe una palabra<<"
    %%%%%:   33-block  0
call    0 never executed
        -:   34:           "\nDigite la cadena de texto...",163);
    #####:   35:    gets(cadena);
call    0 never executed
        -:   36:
    #####:   37:    tamano= strlen(cadena);
        -:   38:
    #####:   39:    cadena[tamano]=' ';
    #####:   40:    cadena[tamano+1]='\0';
        -:   41:
    #####:   42:    printf("Digite la palabra a buscar...");
call    0 never executed
    #####:   43:    gets(palabraComparar);
call    0 never executed
        -:   44:
    #####:   45:    for (int i = 0; cadena[i] != '\0'; ++i) {
    %%%%%:   45-block  0
    %%%%%:   45-block  1
branch  0 never executed
branch  1 never executed
    #####:   46:        if (cadena[i]==' '){
    %%%%%:   46-block  0
branch  0 never executed
branch  1 never executed
    #####:   47:            cadenaAux[aux]='\0';
    #####:   48:            aux=0;
        -:   49:
    #####:   50:            if (strcmp(palabraComparar,cadenaAux)==0){
    %%%%%:   50-block  0
branch  0 never executed
branch  1 never executed
    #####:   51:                contador++;
    %%%%%:   51-block  0
        -:   52:            }
    #####:   53:            memset(cadenaAux,0,50);
    %%%%%:   53-block  0
        -:   54:        } else{
    #####:   55:            cadenaAux[aux]=cadena[i];
    #####:   56:            aux++;
    %%%%%:   56-block  0
        -:   57:        }
        -:   58:    }
    #####:   59:    printf("\nla palabra %s se repite %i ves%s \n",palabraComparar,contador,contador>1? "es":"");
    %%%%%:   59-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   59-block  1
    %%%%%:   59-block  2
    %%%%%:   59-block  3
call    2 never executed
    #####:   60:    system( "pause" );
call    0 never executed
    #####:   61:}
        -:   62:
function encriptar called 0 returned 0% blocks executed 0%
    #####:   63:void encriptar(){
        -:   64:    char cadena[255],cadenaEncriptada[255];
        -:   65:    int tamano;
        -:   66:    //char cadenaLetras[27]="abcdefghijklmn%copqrstuvwxyz",164;
    #####:   67:    printf("\n>>Encriptar<<"
    %%%%%:   67-block  0
call    0 never executed
        -:   68:           "\nDigite la cadena de texto a encpriptar...");
    #####:   69:    gets(cadena);
call    0 never executed
        -:   70:
        -:   71:    //printf("%s",cadenaLetras);
    #####:   72:    tamano= strlen(cadena);
    #####:   73:    for (int i = 0; i < tamano ; ++i) {
    %%%%%:   73-block  0
    %%%%%:   73-block  1
branch  0 never executed
branch  1 never executed
        -:   74:
        -:   75:        //convierte las minuscalas a mayuscula.
        -:   76:
    #####:   77:        if (cadena[i]==toupper(cadena[i])){
    %%%%%:   77-block  0
branch  0 never executed
branch  1 never executed
        -:   78:
    #####:   79:            *(cadena + i) = tolower(*(cadena + i));
    %%%%%:   79-block  0
        -:   80:
        -:   81:        } else{
    #####:   82:            *(cadena + i) = toupper(*(cadena + i));
    %%%%%:   82-block  0
        -:   83:        }
        -:   84:        //*(cadena + i) = toupper(*(cadena + i));
        -:   85:
        -:   86:        //descarta los digitos
    #####:   87:
    %%%%%:   87-block  0
branch  0 never executed
branch  1 never executed
        -:   88:
    #####:   89:                *(cadena + i) = *(cadena + i) + 3;
    %%%%%:   89-block  0
branch  0 never executed
branch  1 never executed
    #####:   90:
    %%%%%:   90-block  0
        -:   91:    }
    #####:   92:
    %%%%%:   92-block  0
        -:   93:
        -:   94:    printf("se suponme que la frase es %s",cadena);
        -:   95:    
        -:   96:}
        -:   97:
        -:   98:void desencriptar(){
        -:   99:
        -:  100:    char cadena[255];
    #####:  101:    int tamano;
    %%%%%:  101-block  0
call    0 never executed
        -:  102:
    #####:  103:    printf("\n>>Desencriptar<<"
        -:  104:           "\nDigite la cadena de texto a desencpriptar...");
function desencriptar called 0 returned 0% blocks executed 0%
    #####:  105:    gets(cadena);
        -:  106:
        -:  107:
        -:  108:    tamano= strlen(cadena);
        -:  109:    for (int i = 0; i < tamano ; ++i) {
    #####:  110:
    %%%%%:  110-block  0
call    0 never executed
        -:  111:        if(isalpha(*(cadena + i))){
    #####:  112:            if(*(cadena + i) < 68  ||(*(cadena + i) >96 && *(cadena + i)<100)){
call    0 never executed
        -:  113:                *(cadena+i)= *(cadena+i) + 23;
        -:  114:            }else{
    #####:  115:                *(cadena+i)= *(cadena+i) - 3;
    #####:  116:            }
    %%%%%:  116-block  0
    %%%%%:  116-block  1
branch  0 never executed
branch  1 never executed
        -:  117:        }
    #####:  118:
    %%%%%:  118-block  0
branch  0 never executed
branch  1 never executed
    #####:  119:
    %%%%%:  119-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  119-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  119-block  2
branch  4 never executed
branch  5 never executed
    #####:  120:    }
    %%%%%:  120-block  0
        -:  121:    printf("se suponme que la frase es %s",cadena);
    #####:  122:}
    %%%%%:  122-block  0
        -:  123:
        -:  124:int main() {
        -:  125:
        -:  126:    int op=0;
        -:  127:    char *mainmenu = "\n      >>>MENU PRINCIPAL<<<\n"
    #####:  128:                     "1. Convertir en nombre propio\n"
    %%%%%:  128-block  0
call    0 never executed
    #####:  129:                     "2. N%cmero de veces que existe una palabra \n"
        -:  130:                     "3. Encriptar \n"
function main called 1 returned 0% blocks executed 19%
        1:  131:                     "4. Desencriptar \n"
        -:  132:                     "5. Agregar caracteres por <- %c ->\n"
        1:  133:                     "6. Borrar caracteres\n"
        1:  134:                     "7. Intersecci%cn\n"
        -:  135:                     "8. Diferencia entre dos cadenas\n"
        -:  136:                     "9. Borrar caracteres <- %c ->\n"
        -:  137:                     "10.Validar correo electr%cnico\n"
        -:  138:                     "11.Salir \n" ;
        -:  139:
        -:  140:    while (op!= 11){
        -:  141:        printf(mainmenu,163,162,162,162,162);
        -:  142:        scanf("%i",& op);
        -:  143:        fflush(stdin);
        -:  144:
        -:  145:        switch (op) {
        -:  146:            case 1:
        1:  147:                convertirNombrePropio();
        1:  147-block  0
        1:  147-block  1
branch  0 taken 1
branch  1 taken 0 (fallthrough)
        1:  148:                break;
        1:  148-block  0
call    0 returned 1
        1:  149:
call    0 returned 0
    #####:  150:            case 2:
call    0 never executed
call    1 never executed
        -:  151:                numVecesPalabra();
    #####:  152:                break;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  153:
    #####:  154:            case 3:
    %%%%%:  154-block  0
call    0 never executed
    #####:  155:                encriptar();
        -:  156:                break;
    #####:  157:
    #####:  158:            case 4:
    %%%%%:  158-block  0
call    0 never executed
    #####:  159:                desencriptar();
        -:  160:                break;
    #####:  161:
    #####:  162:            case 5:
    %%%%%:  162-block  0
call    0 never executed
    #####:  163:                break;
        -:  164:
    #####:  165:            case 6:
    #####:  166:                break;
    %%%%%:  166-block  0
call    0 never executed
    #####:  167:
        -:  168:            case 7:
    #####:  169:                break;
    #####:  170:
    %%%%%:  170-block  0
        -:  171:            case 8:
    #####:  172:                break;
    #####:  173:
    %%%%%:  173-block  0
        -:  174:            case 9:
    #####:  175:                break;
    #####:  176:
    %%%%%:  176-block  0
        -:  177:            case 10:
    #####:  178:                break;
    #####:  179:
    %%%%%:  179-block  0
        -:  180:            case 11:
    #####:  181:                printf("\nGracias por usar nuestro software\n");
    #####:  182:                break;
    %%%%%:  182-block  0
        -:  183:
    #####:  184:            default:
    #####:  185:                printf("\nError digite un numero entre 1 y 11 \n");
    %%%%%:  185-block  0
        -:  186:                break;
    #####:  187:        }
    #####:  188:    }
    %%%%%:  188-block  0
call    0 never executed
    #####:  189:
        -:  190:    return 0;
    #####:  191:}
